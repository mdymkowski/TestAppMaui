<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst;net8.0-windows10.0.19041.0</TargetFrameworks>
    <OutputType>Exe</OutputType>
    <RootNamespace>TestAppMaui.MauiClient</RootNamespace>
    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <ApplicationTitle>TestAppMaui</ApplicationTitle>
    <ApplicationId>com.testappmaui.client</ApplicationId>
    <SupportedOSPlatformVersion Condition="'$(TargetFramework)' == 'net8.0-windows10.0.19041.0'">10.0.19041.0</SupportedOSPlatformVersion>
    <UseMauiEssentials>true</UseMauiEssentials>
  </PropertyGroup>
  <ItemGroup>
    <MauiIcon Include="Resources\AppIcon\appicon.svg" />
    <MauiSplashScreen Include="Resources\Splash\splash.svg" />
  </ItemGroup>
  <ItemGroup>
    <MauiXaml Update="Views\MainPage.xaml">
      <Generator>MSBuild:Compile</Generator>
      <DependentUpon>MainPage.xaml.cs</DependentUpon>
    </MauiXaml>
    <MauiXaml Update="Resources\Styles\Styles.xaml">
      <Generator>MSBuild:Compile</Generator>
    </MauiXaml>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="CommunityToolkit.Mvvm" />
    <PackageReference Include="Telerik.UI.for.Maui" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include=".\Application\MauiClient.Application.csproj" />
    <ProjectReference Include=".\Infrastructure\MauiClient.Infrastructure.csproj" />
    <ProjectReference Include="..\SharedDDD\Contracts\SharedDDD.Contracts.csproj" />
  </ItemGroup>
  <UsingTask TaskName="GenerateWindowsAsset" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <OutputPath ParameterType="System.String" Required="true" />
      <Base64Data ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        var directory = Path.GetDirectoryName(OutputPath);
        if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        var data = Convert.FromBase64String(Base64Data);
        File.WriteAllBytes(OutputPath, data);
      ]]></Code>
    </Task>
  </UsingTask>
  <ItemGroup>
    <WindowsGeneratedAsset Include="$(MSBuildProjectDirectory)\Platforms\Windows\Assets\SplashScreen.png">
      <Base64Data>iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=</Base64Data>
    </WindowsGeneratedAsset>
    <WindowsGeneratedAsset Include="$(MSBuildProjectDirectory)\Platforms\Windows\Assets\Square150x150Logo.png">
      <Base64Data>iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=</Base64Data>
    </WindowsGeneratedAsset>
    <WindowsGeneratedAsset Include="$(MSBuildProjectDirectory)\Platforms\Windows\Assets\Square44x44Logo.png">
      <Base64Data>iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=</Base64Data>
    </WindowsGeneratedAsset>
    <WindowsGeneratedAsset Include="$(MSBuildProjectDirectory)\Platforms\Windows\Assets\Wide310x150Logo.png">
      <Base64Data>iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=</Base64Data>
    </WindowsGeneratedAsset>
  </ItemGroup>
  <Target Name="GenerateWindowsPlaceholderAssets" BeforeTargets="PrepareForBuild">
    <GenerateWindowsAsset OutputPath="%(WindowsGeneratedAsset.Identity)" Base64Data="%(WindowsGeneratedAsset.Base64Data)" />
  </Target>
</Project>
